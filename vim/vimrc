set nocompatible

" General settings ---
set ruler
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set ttyfast
set modeline
set noshortname
set history=100
set cmdheight=1
set shell=/usr/bin/zsh
set encoding=utf8
"set autoread


"load bundle plugins
call pathogen#runtime_append_all_bundles()
"call pathogen#helptags()

" Searching & highlighting ---
set showmatch
set ignorecase 
set smartcase
set hlsearch
set incsearch

" Prettiness ---
syntax on
set number nuw=3
if has('gui_running')
    set guioptions=aimrt
    set guifont=Monospace\ Bold\ 10
    colorscheme wombat
    set background=dark 
else
    colorscheme wombat
    set background=dark 
endif

" Backups ---
set backupdir=/var/tmp
set directory=/var/tmp
"set noswapfile
"set nobackup
"set nowriteback

" Command mode ---
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>
" @todo: cant'get get alt-[fb] to work
cnoremap <C-b> <C-Left>
cnoremap <C-f> <C-Right>

" Wrapping ---
set nowrap
"set textwidth=80
"set linebreak
"set showbreak='+++ '


" Tabs and Spaces ---
set expandtab
set shiftround
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smartindent
set autoindent
set backspace=start,indent,eol

" Abbreviations ---
iabbrev pdb import pdb ; pdb.set_trace()
iabbrev ipdb import ipdb ; ipdb.set_trace()
iabbrev tpdb import trace ; tracer = trace.Trace(ignoredirs=[sys.prefix, sys.exec_prefix,], trace=0, count=1)
iabbrev isodate <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>


" Global map leader
let mapleader   = ','
let g:mapleader = ','


" Shortcuts
map <F2> <Esc>:%retab<cr>
map <F3> <Esc>:NERDTreeToggle<cr>
map <leader>w :w!<cr>


" Tabs ---
map <leader>tn :tabnew<cr>
map <leader>te :tabedit<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove


" Status line ---
set laststatus=2
set statusline=%!StatusLine01()

func! StatusLine01 () 
    let status_line = '%m %F%h%w'

    let cwd = getcwd()
    
    if expand('%:p:h') != cwd
        let cwd_rel = substitute(cwd, $HOME.'/', '~/', 'g')
        let status_line .= ' (cwd: ' . cwd_rel . ')'
    endif

    let status_line .= '%=%04l %04L %3c %3p%%  '

    return status_line
endfunc

" Parenthesis ---
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a"<esc>`<i"<esc>

" Map auto complete of (, ", ', [
inoremap $1 ()<esc>i
inoremap $2 []<esc>i
inoremap $3 {}<esc>i
inoremap $4 {<esc>o}<esc>O
inoremap $q ''<esc>i
inoremap $e ""<esc>i
inoremap $t <><esc>i


" Switch to the cwd of the open buffer
map <leader>cd :cd %:p:h<cr>

" Remappings
map <C-Space> <C-x><C-o>

" Plugin shortcuts
map \tt :NERDTreeToggle
let NERDTreeMapActivateNode=''

" Viminfo

" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
"  n... :  where to save the viminfo files
set viminfo='10,\"100,:20,%,n~/.viminfo

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END


" Python ---
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd BufRead  *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\" 
autocmd BufRead  *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m 
autocmd BufWrite *.py :call DeleteTrailingWS()

let python_highlight_all = 1

autocmd BufNewFile,BufRead *.jinja set syntax=htmljinja
autocmd BufNewFile,BufRead *.mako set ft=mako


" Mouse ---
:set mouse=r
:set selectmode+=mouse


" Search for current visual selection ---
" Taken from http://amix.dk/blog/post/19334

vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

func! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

func! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunc

